---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.14.0
  name: gitopsdeploymentmanagedenvironments.managed-gitops.redhat.com
spec:
  group: managed-gitops.redhat.com
  names:
    kind: GitOpsDeploymentManagedEnvironment
    listKind: GitOpsDeploymentManagedEnvironmentList
    plural: gitopsdeploymentmanagedenvironments
    singular: gitopsdeploymentmanagedenvironment
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GitOpsDeploymentManagedEnvironment is the Schema for the gitopsdeploymentmanagedenvironments
          API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: |-
              The GitOpsDeploymentManagedEnvironment CR describes a remote cluster which the GitOps Service will deploy to, via Argo CD.
              This resource references a Secret resource, of type managed-gitops.redhat.com/managed-environment, that contains the cluster credentials.
              The Secret should contain credentials to a ServiceAccount/User account on the target cluster.
              This is referred to as the Argo CD 'ServiceAccount' below.
            properties:
              allowInsecureSkipTLSVerify:
                description: |-
                  AllowInsecureSkipTLSVerify controls whether Argo CD will accept a Kubernetes API URL with untrusted-TLS certificate.
                  Optional: If true, the GitOps Service will allow Argo CD to connect to the specified cluster even if it is using an invalid or self-signed TLS certificate.
                  Defaults to false.
                type: boolean
              apiURL:
                description: APIURL is the URL of the cluster to connect to
                type: string
              clusterResources:
                description: |-
                  ClusterResources is used in conjuction with the Namespace field.
                  If the .spec.namespaces field is non-empty, this field will be used to determine whether Argo CD should
                  attempt to manage cluster-scoped resources.
                  - If .spec.namespaces field is empty, this field is ignored.
                  - If you are familiar with Argo CD: this field is equivalent to the field of the same name in the Argo CD Cluster Secret.


                  Optional, default to false.
                type: boolean
              createNewServiceAccount:
                description: |-
                  CreateNewServiceAccount controls whether Argo CD will use the ServiceAccount provided by the user in the Secret, or if a new ServiceAccount
                  should be created.


                  Optional, default to false.


                  - If true, the GitOps Service will automatically create a ServiceAccount/ClusterRole/ClusterRoleBinding on the target cluster,
                    using the credentials provided by the user in the secret.
                    - Argo CD will then be configured to deploy with that new ServiceAccount.


                  - Default: If false, it is assumed that the credentials provided by the user in the Secret are for a ServiceAccount on the cluster, and
                    Argo CD will be configred to use the ServiceAccount referenced by the Secret of the user. No new ServiceAccount will be created.
                    - This should be used, for example, when the ServiceAccount Argo CD does not have full cluster access (*/*/* at cluster scope)
                type: boolean
              credentialsSecret:
                description: ClusterCredentialsSecret is a reference to a Secret that
                  contains cluster connection details. The cluster details should
                  be in the form of a kubeconfig file.
                type: string
              namespaces:
                description: |-
                  Namespaces allows one to indicate which Namespaces the Secret's ServiceAccount has access to.


                  Optional, defaults to empty. If empty, it is assumed that the ServiceAccount has access to all Namespaces.


                  The ServiceAccount that GitOps Service/Argo CD uses to deploy may not have access to all of the Namespaces on a cluster.
                  If not specified, it is assumed that the Argo CD ServiceAccount has read/write at cluster-scope.
                  - If you are familiar with Argo CD: this field is equivalent to the field of the same name in the Argo CD Cluster Secret.
                items:
                  type: string
                type: array
            required:
            - allowInsecureSkipTLSVerify
            - apiURL
            - credentialsSecret
            type: object
          status:
            description: GitOpsDeploymentManagedEnvironmentStatus defines the observed
              state of GitOpsDeploymentManagedEnvironment
            properties:
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource.\n---\nThis struct is intended for
                    direct use as an array at the field path .status.conditions.  For
                    example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the
                    observations of a foo's current state.\n\t    // Known .status.conditions.type
                    are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    //
                    +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t
                    \   // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t
                    \   // other fields\n\t}"
                  properties:
                    lastTransitionTime:
                      description: |-
                        lastTransitionTime is the last time the condition transitioned from one status to another.
                        This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        message is a human readable message indicating details about the transition.
                        This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: |-
                        observedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: |-
                        reason contains a programmatic identifier indicating the reason for the condition's last transition.
                        Producers of specific condition types may define expected values and meanings for this field,
                        and whether the values are considered a guaranteed API.
                        The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: |-
                        type of condition in CamelCase or in foo.example.com/CamelCase.
                        ---
                        Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be
                        useful (see .node.status.conditions), the ability to deconflict is important.
                        The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
