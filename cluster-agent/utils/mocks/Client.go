// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	apiclient "github.com/argoproj/argo-cd/v2/pkg/apiclient"
	account "github.com/argoproj/argo-cd/v2/pkg/apiclient/account"

	application "github.com/argoproj/argo-cd/v2/pkg/apiclient/application"

	certificate "github.com/argoproj/argo-cd/v2/pkg/apiclient/certificate"

	cluster "github.com/argoproj/argo-cd/v2/pkg/apiclient/cluster"

	context "context"

	gpgkey "github.com/argoproj/argo-cd/v2/pkg/apiclient/gpgkey"

	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"

	oauth2 "golang.org/x/oauth2"

	oidc "github.com/coreos/go-oidc"

	project "github.com/argoproj/argo-cd/v2/pkg/apiclient/project"

	repocreds "github.com/argoproj/argo-cd/v2/pkg/apiclient/repocreds"

	repository "github.com/argoproj/argo-cd/v2/pkg/apiclient/repository"

	session "github.com/argoproj/argo-cd/v2/pkg/apiclient/session"

	settings "github.com/argoproj/argo-cd/v2/pkg/apiclient/settings"

	v1alpha1 "github.com/argoproj/argo-cd/v2/pkg/apis/application/v1alpha1"

	version "github.com/argoproj/argo-cd/v2/pkg/apiclient/version"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ClientOptions provides a mock function with given fields:
func (_m *Client) ClientOptions() apiclient.ClientOptions {
	ret := _m.Called()

	var r0 apiclient.ClientOptions
	if rf, ok := ret.Get(0).(func() apiclient.ClientOptions); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(apiclient.ClientOptions)
	}

	return r0
}

// HTTPClient provides a mock function with given fields:
func (_m *Client) HTTPClient() (*http.Client, error) {
	ret := _m.Called()

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAccountClient provides a mock function with given fields:
func (_m *Client) NewAccountClient() (io.Closer, account.AccountServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 account.AccountServiceClient
	if rf, ok := ret.Get(1).(func() account.AccountServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(account.AccountServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAccountClientOrDie provides a mock function with given fields:
func (_m *Client) NewAccountClientOrDie() (io.Closer, account.AccountServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 account.AccountServiceClient
	if rf, ok := ret.Get(1).(func() account.AccountServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(account.AccountServiceClient)
		}
	}

	return r0, r1
}

// NewApplicationClient provides a mock function with given fields:
func (_m *Client) NewApplicationClient() (io.Closer, application.ApplicationServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 application.ApplicationServiceClient
	if rf, ok := ret.Get(1).(func() application.ApplicationServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(application.ApplicationServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewApplicationClientOrDie provides a mock function with given fields:
func (_m *Client) NewApplicationClientOrDie() (io.Closer, application.ApplicationServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 application.ApplicationServiceClient
	if rf, ok := ret.Get(1).(func() application.ApplicationServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(application.ApplicationServiceClient)
		}
	}

	return r0, r1
}

// NewCertClient provides a mock function with given fields:
func (_m *Client) NewCertClient() (io.Closer, certificate.CertificateServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 certificate.CertificateServiceClient
	if rf, ok := ret.Get(1).(func() certificate.CertificateServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(certificate.CertificateServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewCertClientOrDie provides a mock function with given fields:
func (_m *Client) NewCertClientOrDie() (io.Closer, certificate.CertificateServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 certificate.CertificateServiceClient
	if rf, ok := ret.Get(1).(func() certificate.CertificateServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(certificate.CertificateServiceClient)
		}
	}

	return r0, r1
}

// NewClusterClient provides a mock function with given fields:
func (_m *Client) NewClusterClient() (io.Closer, cluster.ClusterServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 cluster.ClusterServiceClient
	if rf, ok := ret.Get(1).(func() cluster.ClusterServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(cluster.ClusterServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewClusterClientOrDie provides a mock function with given fields:
func (_m *Client) NewClusterClientOrDie() (io.Closer, cluster.ClusterServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 cluster.ClusterServiceClient
	if rf, ok := ret.Get(1).(func() cluster.ClusterServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(cluster.ClusterServiceClient)
		}
	}

	return r0, r1
}

// NewGPGKeyClient provides a mock function with given fields:
func (_m *Client) NewGPGKeyClient() (io.Closer, gpgkey.GPGKeyServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 gpgkey.GPGKeyServiceClient
	if rf, ok := ret.Get(1).(func() gpgkey.GPGKeyServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(gpgkey.GPGKeyServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewGPGKeyClientOrDie provides a mock function with given fields:
func (_m *Client) NewGPGKeyClientOrDie() (io.Closer, gpgkey.GPGKeyServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 gpgkey.GPGKeyServiceClient
	if rf, ok := ret.Get(1).(func() gpgkey.GPGKeyServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(gpgkey.GPGKeyServiceClient)
		}
	}

	return r0, r1
}

// NewProjectClient provides a mock function with given fields:
func (_m *Client) NewProjectClient() (io.Closer, project.ProjectServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 project.ProjectServiceClient
	if rf, ok := ret.Get(1).(func() project.ProjectServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(project.ProjectServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewProjectClientOrDie provides a mock function with given fields:
func (_m *Client) NewProjectClientOrDie() (io.Closer, project.ProjectServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 project.ProjectServiceClient
	if rf, ok := ret.Get(1).(func() project.ProjectServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(project.ProjectServiceClient)
		}
	}

	return r0, r1
}

// NewRepoClient provides a mock function with given fields:
func (_m *Client) NewRepoClient() (io.Closer, repository.RepositoryServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 repository.RepositoryServiceClient
	if rf, ok := ret.Get(1).(func() repository.RepositoryServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(repository.RepositoryServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewRepoClientOrDie provides a mock function with given fields:
func (_m *Client) NewRepoClientOrDie() (io.Closer, repository.RepositoryServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 repository.RepositoryServiceClient
	if rf, ok := ret.Get(1).(func() repository.RepositoryServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(repository.RepositoryServiceClient)
		}
	}

	return r0, r1
}

// NewRepoCredsClient provides a mock function with given fields:
func (_m *Client) NewRepoCredsClient() (io.Closer, repocreds.RepoCredsServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 repocreds.RepoCredsServiceClient
	if rf, ok := ret.Get(1).(func() repocreds.RepoCredsServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(repocreds.RepoCredsServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewRepoCredsClientOrDie provides a mock function with given fields:
func (_m *Client) NewRepoCredsClientOrDie() (io.Closer, repocreds.RepoCredsServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 repocreds.RepoCredsServiceClient
	if rf, ok := ret.Get(1).(func() repocreds.RepoCredsServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(repocreds.RepoCredsServiceClient)
		}
	}

	return r0, r1
}

// NewSessionClient provides a mock function with given fields:
func (_m *Client) NewSessionClient() (io.Closer, session.SessionServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 session.SessionServiceClient
	if rf, ok := ret.Get(1).(func() session.SessionServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(session.SessionServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewSessionClientOrDie provides a mock function with given fields:
func (_m *Client) NewSessionClientOrDie() (io.Closer, session.SessionServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 session.SessionServiceClient
	if rf, ok := ret.Get(1).(func() session.SessionServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(session.SessionServiceClient)
		}
	}

	return r0, r1
}

// NewSettingsClient provides a mock function with given fields:
func (_m *Client) NewSettingsClient() (io.Closer, settings.SettingsServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 settings.SettingsServiceClient
	if rf, ok := ret.Get(1).(func() settings.SettingsServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(settings.SettingsServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewSettingsClientOrDie provides a mock function with given fields:
func (_m *Client) NewSettingsClientOrDie() (io.Closer, settings.SettingsServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 settings.SettingsServiceClient
	if rf, ok := ret.Get(1).(func() settings.SettingsServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(settings.SettingsServiceClient)
		}
	}

	return r0, r1
}

// NewVersionClient provides a mock function with given fields:
func (_m *Client) NewVersionClient() (io.Closer, version.VersionServiceClient, error) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 version.VersionServiceClient
	if rf, ok := ret.Get(1).(func() version.VersionServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(version.VersionServiceClient)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewVersionClientOrDie provides a mock function with given fields:
func (_m *Client) NewVersionClientOrDie() (io.Closer, version.VersionServiceClient) {
	ret := _m.Called()

	var r0 io.Closer
	if rf, ok := ret.Get(0).(func() io.Closer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Closer)
		}
	}

	var r1 version.VersionServiceClient
	if rf, ok := ret.Get(1).(func() version.VersionServiceClient); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(version.VersionServiceClient)
		}
	}

	return r0, r1
}

// OIDCConfig provides a mock function with given fields: _a0, _a1
func (_m *Client) OIDCConfig(_a0 context.Context, _a1 *settings.Settings) (*oauth2.Config, *oidc.Provider, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *oauth2.Config
	if rf, ok := ret.Get(0).(func(context.Context, *settings.Settings) *oauth2.Config); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth2.Config)
		}
	}

	var r1 *oidc.Provider
	if rf, ok := ret.Get(1).(func(context.Context, *settings.Settings) *oidc.Provider); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*oidc.Provider)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *settings.Settings) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// WatchApplicationWithRetry provides a mock function with given fields: ctx, appName, revision
func (_m *Client) WatchApplicationWithRetry(ctx context.Context, appName string, revision string) chan *v1alpha1.ApplicationWatchEvent {
	ret := _m.Called(ctx, appName, revision)

	var r0 chan *v1alpha1.ApplicationWatchEvent
	if rf, ok := ret.Get(0).(func(context.Context, string, string) chan *v1alpha1.ApplicationWatchEvent); ok {
		r0 = rf(ctx, appName, revision)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *v1alpha1.ApplicationWatchEvent)
		}
	}

	return r0
}
