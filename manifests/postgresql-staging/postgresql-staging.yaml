---
# Source: postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitops-postgresql-staging-headless
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitops-postgresql-staging
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
  namespace: gitops
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitops-postgresql-staging
---
# Source: postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitops-postgresql-staging
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitops-postgresql-staging
  annotations:
  namespace: gitops
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitops-postgresql-staging
    role: primary
---
# Source: postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitops-postgresql-staging-postgresql
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitops-postgresql-staging
    app.kubernetes.io/component: primary
  annotations:
  namespace: gitops
spec:
  serviceName: gitops-postgresql-staging-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: gitops-postgresql-staging
      role: primary
  template:
    metadata:
      name: gitops-postgresql-staging
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: gitops-postgresql-staging
        role: primary
        app.kubernetes.io/component: primary
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: gitops-postgresql-staging
                    app.kubernetes.io/component: primary
                namespaces:
                  - "gitops"
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
      automountServiceAccountToken: false
      containers:
      - name: gitops-postgresql-staging
        image: registry.redhat.io/rhel8/postgresql-12
        imagePullPolicy: "IfNotPresent"
        resources:
            requests:
              cpu: 250m
              memory: 256Mi
        env:
          - name: POSTGRESQL_DATABASE
            value: postgres
          - name: POSTGRESQL_USER
            value: postgres
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: gitops-postgresql-staging
                key: postgresql-password
        ports:
          - name: tcp-postgresql
            containerPort: 5432
        livenessProbe:
            exec:
              command: 
                - /usr/libexec/check-container
                - '--live'
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
        readinessProbe:
            exec:
              command:
                 - /usr/libexec/check-container
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
        volumeMounts:
          - name: data
            mountPath: /var/lib/pgsql/data
          - name: dshm
            mountPath: /dev/shm
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "8Gi"

